                         UNIX System Programming
                        Programming Assignment #2
                        "A C-Shell on the C Chore"

Due: Monday, April 11  at  11:59 pm.

Submission method: You will post to the course website.

Submission rules: I REQUIRE you to FOLLOW THESE RULES:

                  1. Submit one text file, named "<your student ID>.csh"
                     You will, of course, replace "<your student ID>" with
                     your unique ID number (B9.... or M9....)

                  3. Submissions made after the deadline will be ignored.
                     (That means, no late submissions on this assignment.)
                     (By the way, if you don't turn in your assignments, you
                      will probably Fail The Class. That's a Fact. So start
                      early and ask questions.)
                  
                  This is a large class. Unless each of you follows the above
                  rules, the TAs' work becomes so hard. So I INSIST that you 
                  FOLLOW the above rules. If you don't, we won't accept your 
                  homework.

                  If you have questions about these rules, you may post your 
                  questions to the course website.


Getting help:   - The Professor has office hours on Monday from 12:20-2:20, 
                  and on Friday from 10:00-12:00, in room 9037.  He can also 
                  be reached by email.
                - The TAs are also available to answer your questions.
                - Questions about the assignment can be posted to the 
                  Discussion Forum.
                - You may also discuss the ideas of the assignment with your
                  classmates. Such discussions can be quite helpful to your 
                  learning -- IF you ONLY talk about the general concepts of
		  the steps of the assignment.
		  - If, however, you tell other students the specific details
		    of your implementation, then you are not helping each other
		    to learn; you are just doing the work for them.
                    In other words, you are cheating. You CANNOT show another
		    student ANY part of the answer to the assignment.

Cheating policy:  We encourage students to form study groups. But this does not
                  mean saring code. If students are found to be sharing work,
		  they can receive a 0 for the entire course, or worse.
                  It is cheating to let another student see your work, or to 
                  let them look over your shoulder when your code is on the
		  screen.
		  A good way to know you cheated: if you have code that is in
		  your solution just because another student told you to put
		  it there, but you don't actually understand it.
		  If you are still unsure, you can ask the TA for more
		  explanation.
                  We always look for evidence of cheating, so don't do it.
                  (In any event, even if you do not get caught, those who 
                  copy the homework will not learn the material, so they 
                  will fail the exam.)

Most Important    The programming assignments are a large part of the grade.
Things to Know:	  This large point value means that, if you don't do them, you
		  will fail this class.
		  The large point value also explains why the policy against
		  cheating is strictly enforced.
		  


- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

Assignment Summary:

Part 1. The Concept of the Assignment
"""""""""""""""""""""""""""""""""""""
In Homework 1, I implemented one of the chores for you in the C language. The
login.c file received two arguments and tested user input against them, to
determine if the player was able to guess the password. The player got three
guesses and received appropriate messages. The program also exited with a 
success value only if the user was successful.

It was not really good to use a C program in a class about UNIX programming,
but you did not yet know how to make variables or do loops inside scripts.
(And, anyway, it was good to see how UNIX can interact with a C program.)

But now we do know how to make loops and variables. So your new assignment is
to implement a C shell script to perform the chore formerly performed by C.
(In reviewing the login.c file that I had given you for homework 1, I found
that it did not produce quite the same output that the original dunnet did. I
therefore modified it, and have reattached it to this email. The only remaining
difference to the original dunnet program is an extra empty at the end, upon
successful login. But who cares about the original dunnet -- your script should
match to my login.c output.)


Part 2. Rules
"""""""""""""
1. You cannot use any commands not yet covered in lecture.

2. You must produce exactly the same output that the revised login.c file
   provided in the homework 2 posting produces.

3. You cannot guarantee that the user will not input special characters when
   prompted for the login or password.
   
4. You should make your script as small as possible.
   If your program is perfect, but very long, you will get 90%. The remaining
   10% will be awarded on the basis of ways you made the script smaller.
   (In helping you to have a smaller script, I will give you 2 hints:
    1. echo "a\nb" will print a and b on separate lines (IF you are in csh).
    2. csh does not care about lines that never execute: if those lines hold
       something other than cshell code, it's not a problem.
       Note: Don't worry if you can't see the usefulness of this last hint,
             because it will only cost you 1% if you don't use it.


Part 3. More information on how we will measure script size
"""""""""""""""""""""""""""""""""""""""""""""""""""""""""""
We will measure the number of characters in your script, with a few exceptions.

The first exception is that we won't count line #1, because that is #!/.../csh
and the "..." part might be different for each of you.

The second exception is that I don't want to discourage you from indenting and
formatting your code -- so spaces, tabs, and newlines will not count towards
the total size.

The third exception is that I haven't covered quoting methods in detail. So,
for now, just use the " symbol to quote, and I won't count the quotes towards
the total size.


Part 4. What is the minimum possible script size?
"""""""""""""""""""""""""""""""""""""""""""""""""
My size is 412 characters.

To measure it, we first need to cut out line #1, then remove the exception 
characters, then count what is left. I'll talk here about how to do all of this
because it is interesting and uses many of the things we have talked about in
class. (In fact, I considered making this a part of the homework.)

First, how to get rid of the first line (without using commands that we haven't
learned yet)? Well, if I knew that a file, F, had 5 lines, then I could type:
"tail -4 F" or "tail -n 4 F". The problem that we have is that I don't know how
many lines will be in your script (and I don't care, because \n is one of the
exception characters).

To solve this problem, we will need to:
  1. Find out how many lines are in the file. 
     No problem, we just type "cat F | wc -l" or "wc -l < F". (But we don't
     type "wc -l F", because that will print both a number and the file name.)
  2. Decrement (i.e., decrease by one) that value. 
     No problem, we just use expr. But wait, what are the arguments to expr?
     Well, the answer from #1 has to be one of those arguments, and there are 2
     ways to do that: "wc -l < F | xargs expr -1 + " or "expr `wc -l < F` - 1"
  3. Now this answer has to become the argument to the tail command.
     Here, we have two small problems:
     i. We cannot use the "-#" format of tail, because the "#" has to be a 
        literal number. So instead we have to use the "-n #" format.
     ii. You cannot nest `` operators, but we need answer 1 to be an argument
         to 2, and answer 2 to be an argument to 3.
         So a solution is to nest an args inside of a ``:
             % tail login.csh -n `wc -l< F|xargs expr -1 +`
         Or to use the `` in something that then passes to xargs:
             % expr `wc -l <login.csh` - 1 |xargs tail F -n 

Well, that was all very interesting (and relevant to the midterm). But, when
you think about it, none of this was truly necessary in the case of YOUR file.
Because your file is specifically a script, where you know that the first line
looks different than all other lines: only it contains the string "#!". We can
therefore remove the first line by just typing:
             % fgrep -v '#!' F
             Note: I have not yet taught you the '' quoting symbols, but you
                   did have to use them in homework 1. (You don't use them in
                   homework 2, however; this homework should use " instead.)
		   
OK, so now we have removed the first line, using only methods that we have
learned in class so far. (After a few weeks, however, you will find that the
easiest solution is actually "sed 1d < F".)

Second, with the first line gone, let's now remove the symbols that we don't
want, and then count what is left:
             % fgrep -v '#!' login.csh | tr -d '\r\n\t "' | wc -c
             412
Here, I put the " inside of a ' pair.  You'll learn why in the next class.
I also removed the \r symbols, just in case you create your script in Windows.

See that my final answer is 412 characters in size. Most of these characters
actually belong to the strings for the output messages of the script. If your
answer is larger than 412 (as it probably will be) you will lose some points
(but the point loss will not necessarily be in relation to how many characters
larger your answer is).

If your answer is smaller than 412, you can get extra credit. But I don't think
it is possible. Instead it probably means that your output is not the same as
what login.c produces. (By the way, you can compare your output to mine by
redirrecting the input (i.e. the login attempts) to a file and the output to a
file. You then can compare your output to what the-compiled-login.c gives for
the same input. And if you can't compile login.c because of not installing gcc
or cc, you can ask the TA for login.c's output. Or you can play the game and
see the output (with the exception of the one extra line mentioned earlier). )
