                         UNIX System Programming
                         Programing Assignment #3
                          "A Match Made in UNIX"

Due: Monday, May 2  at  11:59 pm.

Submission method: You will post to the course website. The TAs will post 
                   instructions on how to do this.

Submission rules: I REQUIRE you to FOLLOW THESE RULES:

                  1. Submit one tar file named "<your student ID>.tar"

                  2. The contents of the tar file will be:
		     - One directory, named "<your student ID>.PA3".
		     - Three files, named "memgame," "displayboard" and
		       "getchoice".
		       These three files must be contained within the
		       "<your student ID>.PA3" directory.

                  3. Submissions made after the deadline will be ignored.
                     (That means, no late submissions on this assignment.)
                     (By the way, if you don't turn in your assignments, you
                      will probably Fail The Class. That's a Fact. So start
                      early and ask questions.)
                  
                  This is a large class. Unless each of you follows the above
                  rules, the TAs' work becomes so hard. So I INSIST that you 
                  FOLLOW the above rules. If you don't, we won't accept your 
                  homework.

                  If you have questions about these rules, you may post your 
                  questions to the course website.


Getting help:   - The Professor has office hours on Monday from 12:20-2:20, 
                  and on Friday from 10:00-12:00, in room 9037.  He can also 
                  be reached by email.
                - The TAs are also available to answer your questions.
                - Questions about the assignment can be posted to the 
                  Discussion Forum.
                - You may also discuss the ideas of the assignment with your
                  classmates. Such discussions can be quite helpful to your 
                  learning -- IF you ONLY talk about the general concepts of
		  the steps of the assignment.
		  - If, however, you tell other students the specific details
		    of your implementation, then you are not helping each other
		    to learn; you are just doing the work for them.
                    In other words, you are cheating. You CANNOT show another
		    student ANY part of the answer to the assignment.

Cheating policy:  We encourage students to form study groups. But this does not
                  mean sharing code. If students are found to be sharing work,
		  they can receive a 0 for the entire course, or worse.
                  It is cheating to let another student see your work, or to 
                  let them look over your shoulder when your code is on the
		  screen.
		  A good way to know you cheated: if you have code that is in
		  your solution just because another student told you to put
		  it there, but you don't actually understand it.
		  If you are still unsure, you can ask the TA for more
		  explanation.
                  We always look for evidence of cheating, so don't do it.
                  (In any event, even if you do not get caught, those who 
                  copy the homework will not learn the material, so they 
                  will fail the exam.)

Most Important    The programming assignments are a large part of the grade.
Things to Know:	  This large point value means that, if you don't do them, you
		  will fail.
		  The large point value also explains why the policy against
		  cheating is strictly enforced.
		  


- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 

Assignment Summary:

,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
: Part 1. The Concept of the Assignment :
'''''''''''''''''''''''''''''''''''''''''
You will implement a memory game that prompts the user to locate matching pairs
of letters. The implementation makes extensive use of tr and grep, two of our
recent course topics.

The program is also an interesting example because it involves multiple 
scripts. When a command within one script invokes a different script, then
the behavior is similar to a function call. Function calls can take arguments
and return an answer; and it is the same with these script invocations. The
arguments can be passed in as $1, $2, etc; and the return value can be passed
out by exit (and then captured by the caller as $?).


,,,,,,,,,,,,,,,,,,,,,,,,,,
: Part 2. Provided files :
''''''''''''''''''''''''''
If you are reading this file, then you must have untarred the assignment.
Looking in the untarred directory, you will see:
% ls
demo  outputmem  README

The outputmem file is not really meant for you to read.  Instead, it is used
by the demo program.

The demo program is also not meant for you to read. But it is meant for you to
run. It is provided to you to show you how your program is expected to behave.
One of the reasons that I made a demo script is because your output will have
color (because of grep --color), and that color would not display if you were
using less to read this README file. So I instead made a demo.


,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
: Part 3. Details of the Game Play :
''''''''''''''''''''''''''''''''''''
Run the demo script. Follow the instructions (i.e., keep hitting "enter").
After running the script, you should understand how the game is meant to work.
Without running the demo, you will not understand. So go run the demo. 

... What? Are you still here? Go run the demo, then come back.


,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
: Part 4. A Line By Line Description of the memgame Script :
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''
Line 1: 
#!/usr/bin/tcsh     (or the equivalent on your system)

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Line 2:
echo ABCDEFGHIJKLMNOPQRSTUVWX | __1__ | __2__ | __3__ letters | __4__ >>letters

The purpose of Line 2 is to create a file that lists all letters from A-X. But
it lists them twice -- once in upper-case and then once in lower case. And each
letter is on its own line. Moreover, each letter is preceded by a colon.
In other words the following command sequence would yield the output shown 
below (assuming that your Line 2 has correctly created the "letters" file):

% (head -3 letters; echo "..."; head -26 letters|tail -4; echo "..."; tail -3 \
letters )
:A
:B
:C
...
:W
:X
:a
:b
...
:v
:w
:x

To implement line 2, you will need to fill in the 4 numbered blanks shown 
above. Each of these blanks is a single UNIX command That We Have Already 
Learned. These blanks will now be individually described:

 __1__: The input to this blank is, of course, "ABCDEFGHIJKLMNOPQRSTUVWX".

        The output of this blank is:
          1:A
          1:B
          1:C
           .
           .
           .
          1:V
          1:W
          1:X

        Q: How can we get this output?
        A: Use grep, with two flags that are listed on slide #85 of Lecture 6.
           (Yes, I know; slide 85 is for fgrep -- but grep has the same flags.)
           You will also need a regular expression that can find individual
           characters.

__2__: This command removes the numbers from the input stream.

__3__: This command is involved in making the letters each appear twice (recall
       that the above discussion of Line 2 has already said that the final
       output will have upper and lower case letters). Note also that I did not
       say that this command finishes the task, just that it starts it.

       What this command does is to send the input stream to a file (in this
       case, the file is "letters") while also passing the input stream onward
       to the output stream.

__4__: This command makes the input stream lower case.


- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Line 3: 
sort -R letters | __1__ > memboard

The first part of this line is given to you. The sort -R flag is not one that I
require you to learn, but it is useful for games, because it randomly shuffles
the lines of the file. 

(Actually, to be technical it sorts according to a randomized key. What this 
means is that duplicated lines within the file will always get sorted next to
each other -- so, not entirely random. In fact, this feature was the reason why
line 2 needed to make the second half of the letters file be lower-case -- the
lower case letters don't get sorted next to the upper case ones. In
other words:
    % cat file         % sort -R file     % sort -R file     % sort -R file
    a                  b                  a                  b
    a                  A                  a                  a
    A                  A                  B                  a
    A                  a                  A                  A
    b                  a                  A                  A
    B                  B                  b                  B

etc. )

Now, to describe the blank indicated in line 3:
__1__: This command capitalizes (i.e., makes upper-case) the input stream. It
       also turns newlines into commas and colons into spaces.

       If you didn't get the idea clearly, an example might help to explain the
       format. Of course it is random, but it is possible to get this answer:
       % cat memboard
        W, W, C, G, T, Q, N, P, O, L, E, N, U, V, K, M, B, M, K, A, H, U, X, J, S, J, L, F, R, I, X, P, A, F, Q, I, S, B, V, G, E, R, O, D, C, D, T, H,
       %

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Lines 4-6: Here you initialize 3 variables to 0. Two of these variables will
           hold integers that represent a board position. Since there are 48
           positions on the board, the values will range from 1 to 48. But we
           initialize to 0 specifically because this is NOT in the range (which
           allows us to indicate that the choice has not been made).
           The other variable is the counter of the number of moves taken (so,
           obviously, it should be initialized to 0).

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Line 7: The beginning of an infinite while loop.

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Line 8 
./displayboard __1__ __2__ __3__
The first two blanks are the board position variables. 
The third blank is the first argument to the memgame script.
   Note: The only logically reasonable argument is "-c". But you don't need to
         validate the argument. It will either be nothing or "-c"
   Note also: The shell does not crash if you access $1 but there is no $1. 
              Instead, it just yields nothing (i.e., the empty string "").
   Note also also: The -c flag is passed into displayboard because that script
                    will USE it. Now, it just-so-happens that the way that it
                    uses it is going to be in an if statement. And that means
                    that the concern described in Lecture 5 Slides 70-75.
                    Now, we could solve that problem at the if condition (as
                    slide 75 indicates). But, instead we will deal with the
                    problem here, at the place where we pass the flag (but the
                    solution of adding a character at the front of the argument
                    is still the solution, just we do it here). So, if there is
                    no $1 then the third argument passed to displayboard will
                    just be the added character.
                    

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Line 9 

This line begins an if clause. The conditional expression tests for whether the
displayboard script has returned a value that indicates that a match was found.


- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Line 10

To reach line 10, we must have passed the test on line 9. And that means that
the displayboard script has determined that we have found a match.
Now we have not yet seen the displayboard script, but let me just tell you now
that line 11 of that script is going to create a file, and the first line of
that file will contain the letter that is the current match. For example, if I
typed "head -1" on that file, and the output contained the letter "Q", then I 
would know that Q had been matched. (The output also contains some other junk,
but we know that it will only contain one letter.)

The job of line 10 is to take the memboard file and to replace each instance
of that letter with a "_". 

The format is:
    cat memboard | tr __1__ > __2__

Here, __1__ uses a combination of ``, head and tr. It performs the replacement.
__2__ is the name of a new temporary file. (We can't just send the answer back
to memboard directly because it does not work right when the same file is used
for both input and output.)


- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Line 11

This line overwrites the memboard file with the temporary file created on line
10. See the previous paragraph for an explanation of why we needed to do it
this way.


- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Line 12

The purpose of this line is to determine if the game has been won. Since a
match has been removed, then it is possible that there are no more letters in
the memboard file.

The format of Line 12 is:
    grep __1__ && echo __2__ && exit

Not, if your computer can't do "echo a\\nb" correctly, then you can do the same
effect with "echo a && echo b".

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Lines 13 & 14:
  endif
  ./getchoice 0

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Line 15
This line uses the value returned from getchoice to set the value of one of
the variables that you initialized on lines 4-6.

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Line 16
  ./displayboard __1__ 0 __3__

Remember how line 8 ran this same script? Well these arguments are the same as
back on that line, except that __2__ has been replaced with the value of 0. 
(The reason that we do this is that the second choice has not been made yet, so
only one letter should be displayed.)

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Line 17
This line is like line 14, except that the argument is not 0, but is instead
the variable defined on line 15. (The reason that the getchoice script needs
to know about the first choice is so that it can verify that the user does not
try to match the same position with itself.)

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Line 18
This line is like line 15, but it store the answer to the 2nd choice variable.

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Line 19
This line increments the counter of how many moves have been tried. 

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Line 20
end


,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
: Part 5. A Line By Line Description of the displayboard Script :
'''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Lines 1&2
#!/usr/bin/tcsh     (or the equivalent on your system)
clear

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Line 3
This line begins an if-clause. The condition is that the third parameter ($3)
is the value indicating that the user has requested the -c flag.

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Line 4
echo "   a  b  c  d  e  f  g  h\n"
Note: if your computer doesn't support echo "\n", then you will instead use:
echo "   a  b  c  d  e  f  g  h";echo

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Line 5
This line is interesting. Realize that the format of the memboard file is some-
thing like: " W, W, C, G, T, Q, N, P, O, L, E, N, U, V, K, M, B, M, K, A, H..."
But, as you've seen in the demo, the -c flag causes the board to display as:
   a  b  c  d  e  f  g  h

1  W  W  C  G  T  Q  N  P

2  O  L  E  N  U  V  K  M

3  B  M  K  A  H  ...
           ...

Well, line 5 gets us part of the way towards the output that we saw in demo. It
turns " W, W, C, G, T, Q, N, P, O, L, E, N, U, V, K, M, B, M, K, A, H..." into:
1  W  W  C  G  T  Q  N  P
2  O  L  E  N  U  V  K  M
3  B  M  K  A  H  ...
           ...

Now, how does it do it? The format is:
grep __1__ | grep __2__ | __3__ > __4__

__1__: Here we need to think about which flag can put matches onto different
       lines. This is necessary because the memboard file contains just one
       line, but the output should contain 6 lines.
       We also want to think about what regular expression will produce the
       6 matches that we want.
       We also need to feed memboard as an argument, so that grep can use it.

__2__: The goal of this blank is to get numbers in front of the 6 lines that
       the first grep has produced.

__3__: The goal of this blank is to remove convert unwanted characters into
       spaces. And what is an unwanted character? Well, the output is supposed
       to be:
       1  W  W  C  G  T  Q  N  P
       2  O  L  E  N  U  V  K  M
       3  B  M  K  A  H  ...
       So, anything else that you see in the output is unwanted.

__4__: This is a temporary file.


- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Line 6
This line appends 5 new lines to the end of the temporary file indicated in the
__4__ blank of line 5.
The five new lines are to be:
10
20
30
40
50

To produce these five lines, you must use a single command, and that command
cannot be echo.

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Line 7
The goal of this line is to output to the screen the 6 lines of the board, with
empty lines between the rows. In other words, the output is a double-spaced
version of the output produced on line 5.

The way to get this double-spacing is clever. It uses sort to intersperse the
numbers created on Line 6 between the rows created on Line 5, then to remove
the numbers, so that we are left with empty lines between the rows.

The format of the line is:

sort gt | grep __1__ | __2__

After the sort, you will have:
0
1  W  W  C  G  T  Q  N  P
10
2  O  L  E  N  U  V  K  M
20
3  B  M  K  A  H  ...
       ...

We want to get rid of the small lines but leave the large ones. Clearly, we
can't just feed it into "tr -d 0-9", because that would kill the line numbers
that we do want (i.e., the numbers from 1 to 6 at the front of the rows).
So we have to do something tricky to get the result we want. Then what goes in
the blanks?

__1__: This blank requires you to find a regular expression that matches to the
       rows but not to the numbers 0,10,20,.... But if you just grep for that
       regular expression, you won't just get rid of the unwanted numbers, you
       will also get rid of their newline symbols.
       So, instead, we need to do something odd. If we ask for context in grep,
       it will put a -- between the contexts. For example:
       % seq 10 | grep -C1 "[38]"
       2
       3
       4
       --
       7
       8
       9
       %

       But, if there are two matches that overlap in their contexts, then the
       "--" does not print:
       % seq 10 | grep -C1 "[35]"
       2
       3
       4
       5
       6
       %
       
       But what does this have to do with our present problem? Well, the "--"
       separators are a consequence of asking for context -- even if you ask
       for zero lines of context.

       So ask for 0 lines of context and you will get the rows separated by
       lines containing only "--"

__2__: The goal of this blank is to remove the "--" lines (but leaving their
       newline characters).


- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Line 8
echo "\n-------------------------\n"
(But if your echo "\n" doesn't work, then use:
                                  echo;echo "-------------------------";echo .)

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Line 9
endif


- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Line 10
The goal of this line is create a file with 48 numbered lines, based on
the contents of the memboard file.
if memboard is: " W, W, C, G, T, Q, N, P, O, L, E, N, U, V, K, M, B, M, K, ..."
then the output of line 10 is a file containing:
     1   W
     2   W
     3   C
     4   G
     5   T
      ...
Notice that the commas are not printed. Notice also that there are spaces. One
of these is actually a tab character, because cat -n creates one:
% echo X | cat -n | tr \\t @
     1@X
%

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Line 11
The goal of this line is to identify the two chosen positions. (Technically, I
should say "the up-to-two chosen positions", because there are sometimes 0 or 1
chosen positions.)

So, what we want is a grep command that examines the file created on line 10,
and which finds the lines of that file which contain the line numbers matching
to the two numbers passed in as $1 and $2. (OK, technically, the up-to-two
numbers. But not really. In fact two numbers are always passed. It is just that
those numbers might be the number "0". In that case it is a number; its just
not a number that will appear in the file -- and that's good, because we don't
want to select choices that aren't choices.)

The answer of line 11 is therefore up-to-two lines of output.

The output of line 11 must be redirected to a new temporary file.


- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Line 12
The goal of this line is to set a variable to indicate if the file produced on
line 11 reveals that a match was found. You must use "uniq -c". Other than
that, you may implement this line in any way that you like.
Q: But what value to set the variable to?
A: I don't care. Ultimately (on line 19, below), this variable is going to be
   used as the argument for an exit command. That means that this value is
   going to be returned to the memgame script on line 8 of that script. Then,
   on line 9 of that memgame script, this value is used in a conditional for
   an if clause. So I don't care what value you set this variable to -- I only
   care that you make the returned value consistent with the meaning of the if
   clause of the memgame script.
   

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Line 13
The format is:
grep __1__ | tr __2__ >> __3__

__1__: The stuff that goes here is almost identical to what you used for the
       grep back on Line 11. The only difference is the inclusion of a "-v"
       flag. The effect of the "-v" is, obviously, to match to all of the lines
       that the user hasn't chosen.
__2__: The goal of this blank is to hide these not-chosen letters, by turning
       them (and only them -- ie, not the "_" or numbers) into question marks.
__3__: This is the same file that you created on line 11. Because we are
       appending, this file will ultimately have all of the positions, with
       the proper ones exposed and the others turned into question marks. But,
       of course, these are not in the correct order yet, because the chosen
       ones are at the top.
   

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Line 14
The format of this line is:
sort __1__ | tr __2__ | tr __3__ > __4__
__1__: This blank sorts the file that you had appended to on line 13, so that
       now the exposed letters appear in their proper places.
__2__: This blank deletes all the unwanted stuff on each line, leaving just
       two characters: a tab (produced back on line 10) and the display symbol
       for the position on the board (i.e., ether a letter or a "_" or a "?").
       Of course it also leaves the newline characters alone.
__3__: This line turns newlines into commas and tabs into spaces.
__4__: This is a new temporary file. It has the same format as the memboard
       file.
       If memboard is: " A, E, G, _, E, Q, ...", and if the choices were 2 & 6,
       then this new file will hold: " ?, E, ?, _, ?, Q, ..."
   

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Lines 15-18
These are almost identical to lines 4-7
The only difference is that line 18 has a final step when compared to line 7:
it makes the exposed letters to print as red.
Now, on line 7, all the letters were exposed (because that was cheat mode), but
none of the letters printed in color. In the line 18 version, however, at most
two letters are exposed. The format of line 18 is therefore:
     <Line 7> | grep --color __1__
But you need to be a bit clever to find the right thing to put into __1__.
If you just choose "[A-Z]", it will only print the rows with exposed letters
which are, at most 2 rows (whereas we want to see all 6 rows).
If you say -C6 "[A-Z]", then it will usually work. But what about in the case
where both input choices are 0? Well, in that case nothing would print.
So, what you need are two expressions: one that colors red, and another that
doesn't color red because it cannot be seen. But which still matches to every
line.


- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Line 19
echo 

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Line 20
exit __1__


In the __1__, you insert the value of the variable that you created back on
line 12.


,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,,
: Part 6. A Line By Line Description of the getchoice Script :
''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''''

Lines 1-4:
#!/usr/bin/tcsh
while 1
  while 1
    echo -n "\nEnter your choice: "


- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -
Line 5:
This line stores what the user types into a variable named ch.
Hopefully, the user has typed a letter followed by a number.


- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Line 6:
The format of this line is:
echo $ch | grep __1__ | grep __2__ | grep __3__ && \

__1__: Your goal here is to get each character on its own line.
__2__: Your goal here is to find which lines have letters that are in-range.
__3__: Your goal here is to verify that that a letter was found on line 1.
       But also, you want to throw away the output (because you just want the
       success/fail status to drive the && at the end of the line).


- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Line 7:
The format of this line is:
echo $ch | grep __1__ | grep __2__ | grep __3__ && break

__1__: This is the same as Line 6's __1__
__2__: Your goal here is to find which lines have numbers that are in-range.
__3__: Your goal here is to verify that that a number was found on line 2.
       But also, you want to throw away the output.


- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Lines 8-9:
8:    echo "Invalid choice. Please try again."
9:  end


- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Line 10:
The purpose of this line is to create a file that contains a number between
1 and 48. That number is based on the choice they have made. (And we know, 
at this point, that the choice is valid, so it will produce a number in this
range). The conversion is: a1=1, b1=2, c1=3, ... h1=8, a2=9, b2=10,...,h6=48.
Performing this conversion by using only instructions we already know is a
challenge. The calculation will be as shown here (can you see the pattern?):
a1 ->  expr 8 * 1 + 1 + -8  =  1
b1 ->  expr 8 * 1 + 2 + -8  =  2
c1 ->  expr 8 * 1 + 3 + -8  =  3
       ...
h1 ->  expr 8 * 1 + 8 + -8  =  8
a2 ->  expr 8 * 2 + 1 + -8  =  9
b2 ->  expr 8 * 2 + 2 + -8  =  10
       ...
h2 ->  expr 8 * 2 + 3 + -8  =  16
a3 ->  expr 8 * 3 + 1 + -8  =  17
b3 ->  expr 8 * 3 + 2 + -8  =  18
       ...
g6 ->  expr 8 * 6 + 7 + -8  =  47
h6 ->  expr 8 * 6 + 8 + -8  =  48

Of course, the above is not the most obvious way to calculate these values.
There is, for example the addition of a -8 where it would be more natural to
just subtract 8. Why such an odd way to calculate the answer? Well, we aren't
doing it this way because we want to; we do it this way because it is the only
way that I could think of that using just instructions that we already know.

So, how to do it?
Step 1 is to create the arguments for expr. It has the following format:

echo $ch | grep __1__ | sort | tr __2__ | grep __3__ | tr __4__ | xargs __5__

__1__: The same as Line 6's __1__. Just to remind you, this grep puts the two
       characters of the users choice onto two separate lines. The answer gets
       piped into sort, which will rearrange the lines so the number becomes
       the first line. (Numbers have lower ASCII codes than letters.)
__2__: This converts newlines into plusses ("\n" -> "+") and it converts the
       letters into their numerical values ("a" -> "1", "b" -> "2", "h" -> "8")
       So, for example, a choice of "c5" would now be "5+3+"
__3__: This is identical to __1__ (which is also the same as Line 6's __1__).
       So, for example, the "5+3+" would now be on four lines.
__4__: This turns newlines into spaces. So, for example, a choice of "c5" would
       now be "5 + 3 + ".
__5__: This line adds an "8" and a "\*" at the beginning of the piped input.
       So, for example, "5 + 3 + " becomes "8 \* 5 + 3 + ".

At this point, we don't yet have a complete expression, because the "-8" is not
there yet. Now it is time for step 2.

Step 2 is to take all of the stuff from step 1 and to use the `` operator to
make it all become arguments to an expr command. Then add a final argument to
the expr command, a "-8". So, for example, a choice of "c5" has now become 
"expr 8 * 5 + 3 + -8".

Step 3 is to redirect the answer from expr into a temporary file.

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Line 11:
This line assigns the value from the temporary file just created to a variable
named x.

Now, the astute reader will wonder why Lines 10 and 11 are separate. Why use a
temporary file instead of just assigning the variable on __3__ of line 10? In
other words, why not make __3__ to be "xargs set x = "? Well, the answer is
that the set command does not, for some reason, work with xargs.

So, the astute reader might go on to ask, why not use `` instead, since `` and
xargs have similar roles? In other words, why not say "set x = `...`" (where
`...` is all of the stuff from line 10)? The answer to this question is that
line 10 has already used the ``, and the `` cannot be nested (ie, you cannot
use more than one at a time).

But, the astute reader might continue asking, if we cannot nest ``, then why
not convert the `` from line 10 into an xargs, so that we would still be able
to use "set x = `...`" (because the ... wouldn't use the ``)? The answer to
this question is that the `` in line 10 cannot be converted into an xargs. Here
is why: xargs will place the piped-input AT THE END of the argument list. But
we needed it at the front. In other words, `` allowed us to create
"expr 8 * 5 + 3 + -8", but xargs would have created "expr -8 8 * 5 + 3 +".

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Line 12:

At this point, we know that ch holds a choice that is on the board. But we do
not know if it is unexposed (if it is exposed then its not a valid choice).

The format is:
if ( __1__ ) cat memboard | __2__ | __3__ | __4__ && __5__

__1__: This checks to make sure that the new choice is not the same as the
       first choice (ie, $1). In other words, we don't allow the user to try
       to match c5 with c5, or g2 with g2.
       Note: Half the time that the getchoice script is called, $1 = 0, because
             there is no preexisting first choice, because this IS the first
	     choice. In those cases, the conditional test of __1__ will always
	     succeed because the user cannot choice position 0 -- and that is
	     the behavior that we want, because only second choices should be
	     able to be rejected.
	     
__2__: This turns commas into newlines. If you will recall, the memboard file
       is one long line with commas separating the position. Turning commas
       into newlines will therefore put each position onto a different line.

__3__: This removes the lines that do not contain letters (i.e., they contain
       "_" instead, because they have already been matched.) This also inserts
       line numbers in front of all the matching lines.
       For example: If a memboard's 4th position contains "_" then it doesn't
       print. But if it contains "Q", then it prints as "4: Q". (The space in
       front of the Q is because the memboard file contains spaces.)

__4__: This checks to see if the piped input stream contains the line number
       that is stored in x. If so, then the choice is a valid choice, because
       that position still contains a letter.
       Note: The value of x can range from 1 to 48. Some of the values in this
             range are single-digit values. You have to be careful to design
             your regular expression such that you don't match to part of a
             line number. For example, if the user chooses "c1", then that is
             position 3. So you want to know if memboard's third position is a
             letter -- you don't want to know about positions 13,23,30-39 & 43.
      Note also: You don't want to generate screen output because your goal is
                 just to test for success (ie, to set $?). So, you must throw
                 away the output.

__5__: To reach this point, the choice must be valid. So exit the script AND
       pass back the value of x. (In other words, use csh's exit command in the
       same way that programmers use C++'s return command -- passing a value
       back to the caller.)

- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - -

Lines 13-14:
13:  echo "That place is already revealed. Please try again."
14:end
