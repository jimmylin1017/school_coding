                         UNIX System Programming
                         Programing Assignment #5
                           Palindromemordnilap

Due: Monday, June 13  at  11:59 pm.

Submission method: You will post to the course website. The TAs will post 
                   instructions on how to do this.

Submission rules: I REQUIRE you to FOLLOW THESE RULES:

                  1. Submit one tar file named "<your student ID>.tar"

                  2. The contents of the tar file will be:
		     - One directory, named "<your student ID>.PA5".
		     - Inside that directory are two files:
		       insertmarkers.sed and palindrome.sed

                  3. Submissions made after the deadline will be ignored.
                     (That means, no late submissions on this assignment.)
                     (By the way, if you don't turn in your assignments, you
                      will probably Fail The Class. That's a Fact. So start
                      early and ask questions.)
                  
                  This is a large class. Unless each of you follows the above
                  rules, the TAs' work becomes so hard. So I INSIST that you 
                  FOLLOW the above rules. If you don't, we won't accept your 
                  homework.

                  If you have questions about these rules, you may post your 
                  questions to the course website.

Getting help:   - The Professor has office hours on Monday from 12:20-2:20, 
                  and on Friday from 10:00-12:00, in room 9037.  He can also 
                  be reached by email.
                - The TAs are also available to answer your questions.
                - Questions about the assignment can be posted to the 
                  Discussion Forum.
                - You may also discuss the ideas of the assignment with your
                  classmates. Such discussions can be quite helpful to your 
                  learning -- IF you ONLY talk about the general concepts of
		  the steps of the assignment.
		  - If, however, you tell other students the specific details
		    of your implementation, then you are not helping each other
		    to learn; you are just doing the work for them.
                    In other words, you are cheating. You CANNOT show another
		    student ANY part of the answer to the assignment.

Cheating policy:  We encourage students to form study groups. But this does not
                  mean sharing code. If students are found to be sharing work,
		  they can receive a 0 for the entire course, or worse.
                  It is cheating to let another student see your work, or to 
                  let them look over your shoulder when your code is on the
		  screen.
		  A good way to know you cheated: if you have code that is in
		  your solution just because another student told you to put
		  it there, but you don't actually understand it.
		  If you are still unsure, you can ask the TA for more
		  explanation.
                  We always look for evidence of cheating, so don't do it.
                  (In any event, even if you do not get caught, those who 
                  copy the homework will not learn the material, so they 
                  will fail the exam.)

Most Important    The programming assignments are a large part of the grade.
Things to Know:	  This large point value means that, if you don't do them, you
		  will fail.
		  The large point value also explains why the policy against
		  cheating is strictly enforced.
		  


- - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 
 - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - - 


*******************************
*  Concept of the Assignment  *
*******************************

Palindromes are string sequences containing the same sequence of letters,
whether written forwards or backwards (eg, "Racecar").  Punctuation does not
count, so "A man, a plan, a canal, Panama!" is also a palindrome. In this
homework, you will use sed to find palindromes. There will be 3 simplifications
to the assignment. First, the palindromes will not cross onto multiple lines.
Second, the palindromes will not overlap (eg., "abcbaxyxa" uses the middle "a"
for two different palindromes. Such an overlapping string is not something you
need to handle.) Third, the palindromes that you will be finding do not need to
begin and end at word boundaries (unlike traditional palindromes). The reason
that we make these simplifications is just to make your program simpler. For
example, we could have restricted to the beginning and ends of words if we
wanted to, by using the \< and \> operators.

On slide #65 of lecture 8, we learned that backreferencing can be used in
regular expressions to find repeated matches. At that time, we pointed out
how this could be used to locate palindromes. for example:

% echo "A racecar driver." | grep -o "\([a-z]\)\([a-z]\)\([a-z]\)[a-z]\3\2\1"
racecar

One issue with the above grep example is that it is specifically designed to
find 7-letter palindromes. To find any other length of palindrome, we would
need a different regular expression. And, what is more, you could not use more
than 9 backreferences (\9 works but \10 gets understood as \1 followed by a 0).
Another issue is that even-length palindromes don't have the center-letter that
the above 7-letter regular expression used. A third issue is that the above
regular expression did not consider punctuation. For example, consider this
4-letter palindrome regular expression:

% echo "Boom! Moo! The tooth, too, then." | grep -oi \
  "\([a-z]\)\([^a-z]*\)\([a-z]\)\([^a-z]*\)\3\([^a-z]*\)\1"
om! Mo
toot
too, t

Look at the above output. First, notice that there were 3 matches. Second,
notice that punctuation and capitalization did not prevent the match. Third,
notice that "oom! Moo" is a 6-letter palindrome, but only the 4-letter
palindrome "om! Mo" was matched.

Now, in this new homework, we'll use sed to find all palindromes of any length.


***********************************
*  Looking at the Provided Files  *
***********************************

Let's look in the directory that you untarred to see this README file:
% ls
findpalindromes             palindromes.txt  README
findpalindromes4explaining  patternfile


First, see the file called "palindrome.txt?" It is a sample input file. Let's
have a look at it:
% cat palindomes.txt
Here is a palindrome: A man, a plan, a canal, Panama!
Here is another one: racecar.
Yet another: Go hang a salami. I'm a lasagna hog.
Here is a broken one: Go hang a salami. I am a lasagna hog.
But we have no palindrome on this line.


Second, see the file called "findpalindromes". What is it? Let's have a look:
% cat findpalindromes
cat palindromes.txt | tr "A-Z" "a-z" | sed -nf insertmarkers.sed | \
                                       sed -f palindrome.sed >patternfile
cat palindromes.txt | grep -C9 -i -f patternfile  --color


OK. So it is a script, designed to control the running of the insertmarkers.sed
and palindrome.sed programs that you will be writing. The first line creates
a file called "patternfile". The second line then use "patternfile" in a grep.
(The -f flag of grep allows a set of regular expressions to be provided from a
file.)

Assuming that you have written your two sed programs, then running this script
will display the palindrome.txt file, with its palindromes highlighted in red.
What does the output look like? Well, I can't show here, because this README
file can't show color. But I'll use "{" and "}" to show what would be color:
% ./findpalindomes
H{ere} is {a pa}lindrome: {A man, a plan, a canal, Panama}!
H{ere} is another one: {racecar}.
Yet another: {Go hang a salami. I'm a lasagna hog}.
H{ere} is a brok{en one}: Go hang {a sa}lam{i. I} {am a} l{asa}gna hog.
But we have no palindrome on this line.


If you have trouble seeing the "{" symbols above, I've also provided another
script that shows the matches only, "findpalindromes4explaining". Let's see it:

% cat findpalindromes4explaining
cat palindromes.txt | tr "A-Z" "a-z" | sed -nf insertmarkers.sed | \
                                       sed -f palindrome.sed >patternfile
cat palindromes.txt | grep -noif patternfile
% ./findpalindromes4explaining
1:ere
1:a pa
1:A man, a plan, a canal, Panama
2:ere
2:racecar
3:Go hang a salami. I'm a lasagna hog
4:ere
4:en one
4:a sa
4:i. I
4:am a
4:asa


OK. Let's move on to the next file that I've provided, "patternfile". If you 
you look in the findpalindromes script, you will see that it creates this file.
The reason thatI have given it to you is so that you can test your sed scripts
to see if they produce the same patterns as mine does:
% cat patternfile
ere
a pa
a ma
an, a
an, a
a man, a plan, a canal, panama
ana
ana
ama
ere
racecar
a sa
ala
go hang a salami. i'm a lasagna hog
a la
asa
ere
en one
a sa
ala
i. i
am a
a la
asa

You will notice that some lines repeat. That does not matter.


*********************************************************
*  A Summary of What Each of Your Sed Programs Will Do  *
*********************************************************

Let's look at how these sed programs are used:
% head -2 findpalindromes
cat palindromes.txt | tr "A-Z" "a-z" | sed -nf insertmarkers.sed | \
                                       sed -f palindrome.sed >patternfile

The first sed program, "insertmarkers.sed" is meant to create a series of
versions of the input lines -- each having a "@" symbol to serve as a marker
for the center of the palindrome. The best way to explain it is to show an
example:

% echo 'look! a racecar.' | sed -nf insertmarkers.sed>>newR
l@ook! a racecar.
lo@ok! a racecar.
loo@k! a racecar.
look@! a racecar.
look! a@ racecar.
look! a r@acecar.
look! a ra@cecar.
look! a rac@ecar.
look! a race@car.
look! a racec@ar.
look! a raceca@r.
look! a racecar@.


Notice that the every letter gets a chance to have a @ after it. Punctuation
marks a spaces don't get such a chance, however.

The second sed program takes the output from insertmarkers.sed and creates
the list of identified palindromes. This list then goes into "patternfile".
The basic concept of how the palindrome will be identified is to use the hold
space. In general, the matched part of the palindrome will go into the hold
space while the unmatched part will be in the pattern space.
For example:
              pattern space --> race@car --> ra@ar --> r@r    --> @ 
              hold space                     ce@c      ace@ca     race@car


***************************************************
*  Line by Line description of insertmarkers.sed  *
***************************************************

Line 1: This line puts a "@" in the front of the pattern space.

Line 2: This line defines a label.

Line 3: This line moves the marker to the next letter. Note that you don't need
        need to worry about upper-case letters, because there are none -- the
	tr command within the findpalindromes script has lowered them already.
        After moving the marker, it prints the pattern space.

Line 4: This is a conditional branch back to Line 2. 


************************************************
*  Line by Line description of palindrome.sed  *
************************************************

Line 1: This line checks to see if the marker is at the center of a palindrome.
        If it isn't a palindrome, then we throw away the line. So, how to do
	it? Well, the line looks like this:

        /\(\(__1__\)__2__ __3__ @ __4__ __5__ \) __6__ \)/!d


	__1__: This is a letter.
	__2__: Then it might or might not have punctuation. (In other words,
	       zero or more.)
	__3__: Then it might or might not have a single letter. (In other
	       words, zero or one.) If it does have a letter, then this match
	       will be an odd-length palindrome.
	__4__: Then it might or might not have punctuation. (In other words,
	       zero or more.)
	__5__: Then it will have the same letter that it started with (i.e.,
	       a backreference).
	__6__: At this point, we don't need any more in the pattern, for the
	       purpose of knowing whether a palindrome has been found. But we
	       will add more to the pattern (because we'll need it later). So
	       we also add another part. This part matches to the rest of the
	       first line of the pattern space. In other words, a string of
	       non-newline characters.

Line 2: Notice that the "\(\(__1__\)__2__ __3__ @ __4__ __5__ \)" part of
        Line 1 is the palindrome matching part of the input.
	
	Now, line 2 is an "s//__1__/" command. Ordinarilly, the first part
	of an s command is the regular expression. In this case, however, we
	don't need to insert a regular expression because we just reuse the
	expression from line 1.

        __1__: The job here is to separate the matched part from the rest of
	       the pattern, leaving a marker of where it was. The separation
	       will be a newline character.

               Here are some examples, to explain the desired effect:
    	                 race@car -> ra@ar\nce@c
	                    ra@ar -> r@r\na@a
	                      r@r -> @\nr@r
               he said, "a@ dog." -> he sai@og.\nd, "a@ d

               See what happened? The matched part is moved onto a separate
               line within the pattern space.

Line 3: This line branches to line 8.

Line 4: This line is blank.

Line 5: This line defines a label.

Line 6: This line appends the hold space at the end of the pattern space. So,
        at this point, the pattern space will now have two newline characters
        within it. This is how the pattern space would now be arranged:
          1st line of pattern space: The not-yet tested part of the input.
          2nd line of pattern space: The most recently-matched part of the
                                     input. (Could have been created on Line 2)
          3rd line of pattern space: The previously-matched part of the input.

Line 7: This line is blank.

Line 8: This line defines a label.

Line 9: This line copies the pattern space into the hold space. So now we have
        a backup copy. This will allow us to modify the pattern while still
        being able to restore the pattern.

Line 10: This line removes everything except the first line of the pattern
         space. In other words, the pattern space now holds the not-yet tested
         part of the input.

Line 11: This line swaps the pattern space and the holding space.

Line 12: This line does the opposite of line 10: it removes the first line of
         the pattern space (including the newline character at the end of that
         line). So now, what is left is:
          1st line of pattern space: The most recently-matched part of the
                                     input. (Could have been created on Line 2)
          2nd line of pattern space: The previously-matched part of the input.

Line 13: This line is blank.

Line 14: This line conditionally branches to line 15. And why branch to the
         next line (which you would have naturally fallen into anyway)? The
         reason is that it clears the test flag.

Line 15: This line defines a label.

Line 16: This line is blank.

Line 17: This line will merge the newly-matched part (ie, what comes before
         the newline character), with the previously-matched part (ie, what 
         comes after the newline character). 
         For example: a@a\nce@c -> ace@ca

Line 18: This line swaps the pattern space and the holding space.

Line 19: This line is:  s/__A__/__B__/

         As for the __A__ part, it uses a regular expression that is similar to
         Line 1, except that we no longer allow the optional character at the
         center. What that means is to remove one specific one of the blanks
         from back on Line 1:
         /\(\(__1__\)__2__ @ __4__ __5__ \) __6__ \)/
      
         As for the __B__ part, this is the same as the comparable part of
         Line 2.

Line 20: This line conditionally branches to line 5.

Line 21: This line swaps the pattern and hold spaces.

Line 22: This line removes the @ symbol
